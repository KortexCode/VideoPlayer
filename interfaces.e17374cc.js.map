{"version":3,"sources":["ejercicios/typeScript/interfaces.ts"],"names":[],"mappings":"AAAA,IAAK,KAGJ;AAHD,CAAA,UAAK,KAAK,EAAA;EACN,KAAA,CAAA,MAAA,CAAA,GAAA,MAAa;EACb,KAAA,CAAA,OAAA,CAAA,GAAA,OAAe;AACnB,CAAC,EAHI,KAAK,KAAL,KAAK,GAAA,CAAA,CAAA,CAAA,CAAA;AASV,IAAI,IAAI,GAAc;EAClB,KAAK,EAAE,CAAC;EACR,IAAI,EAAC,CAAC;EACN,KAAK,EAAE,KAAK,CAAC;CAChB;AACD;AACA,SAAS,IAAI,CAAC,CAAa,EAAA;EACvB,OAAO,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,KAAK;AAC3B;AAEA,IAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC;AAC3B,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC;AACrB,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC;AAE1B;AACA,IAAI,CAAC,QAAQ,GAAG,YAAA;EACZ,OAAO,IAAI,CAAC,KAAK,GAAG,qBAAA,CAAA,MAAA,CAAiB,IAAI,CAAC,KAAK,CAAE,GAAG,eAAe;AACvE,CAAC;AACD;AACA,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC","file":"interfaces.e17374cc.js","sourceRoot":"..","sourcesContent":["enum Color {\n    rojo = \"rojo\",\n    verde = \"verde\",\n}\ninterface Rectangulo {\n    ancho: number;\n    alto:number;\n    color?:Color,//Podemos poner una propiedad opcional en la interface\n}\nlet rect: Rectangulo= {\n    ancho: 5,\n    alto:4,\n    color: Color.rojo,\n}\n//Esta función recibe un argumento de tipo Interface\nfunction area(r: Rectangulo):number {\n    return r.alto * r.ancho;\n}\n\nconst areaRect = area(rect);\nconsole.log(areaRect);\nconsole.log(rect.toString);\n\n//El método toString puede ser re definido\nrect.toString = function(){\n    return this.color ? `Un rectángulo ${this.color}` : \"Un rectángulo\";\n}\n//Al usar nuevamente el método toString ya se verá como la cadena retornada en la función\nconsole.log(rect.toString());\n"]}