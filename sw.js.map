{"version":3,"sources":["sw.js"],"names":["self","addEventListener","event","waitUntil","precache","request","method","respondWith","cacheResponse","cache","caches","open","addAll","responde","match","console","log","fetch"],"mappings":"AAAA;AACA;AACAA,IAAI,CAACC,gBAAgB,CAAC,SAAS,EAAEC,KAAK,IAAG;EACrCA,KAAK,CAACC,SAAS,CAACC,QAAQ,EAAE,CAAC,CAAC;AAChC,CAAC,CAAC;;AAEFJ,IAAI,CAACC,gBAAgB,CAAC,OAAO,EAAEC,KAAK,IAAG;EACnC,MAAMG,OAAO,GAAGH,KAAK,CAACG,OAAO;EAC7B,IAAGA,OAAO,CAACC,MAAM,KAAK,KAAK,EAAC;IACxB;EACJ;EACAJ,KAAK,CAACK,WAAW,CAACC,aAAa,CAACH,OAAO,CAAC,CAAC;AAC7C,CAAC,CAAC;AAEF,eAAeD,QAAQ,GAAE;EACrB;EACA,MAAMK,KAAK,GAAG,MAAMC,MAAM,CAACC,IAAI,CAAC,IAAI,CAAC;EACrC,OAAOF,KAAK,CAACG,MAAM,CAAC;IAChB;IACD;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EARO,CASF,CAAC;AACN;AAEA,eAAeJ,aAAa,CAACH,OAAO,EAAC;EACjC,MAAMI,KAAK,GAAG,MAAMC,MAAM,CAACC,IAAI,CAAC,IAAI,CAAC;EACrC;EACA,MAAME,QAAQ,GAAG,MAAMJ,KAAK,CAACK,KAAK,CAACT,OAAO,CAAC;EAC3CU,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEH,QAAQ,CAAC;EAClC;EACA,OAAOA,QAAQ,KAAI,MAAMI,KAAK,CAACZ,OAAO,CAAC;AAC3C","file":"sw.js","sourceRoot":"..","sourcesContent":["//El self es como el this para el serviceworker\n//Cuando se instala el serviceworker se disparará este evento\nself.addEventListener(\"install\", event =>{\n    event.waitUntil(precache());//Lista de recursos que ya queremos que tenga en caché\n});\n\nself.addEventListener(\"fetch\", event =>{\n    const request = event.request;\n    if(request.method !== \"GET\"){\n        return;\n    }\n    event.respondWith(cacheResponse(request))\n})\n\nasync function precache(){\n    //caches es un API del Dom\n    const cache = await caches.open(\"v1\");\n    return cache.addAll([\n        //Aquí añadimos varios recursos\n       /*  \"/\",\n        \"/index.html\",\n        \"/src/normalize.css\",\n        \"/src/index.css\",\n        \"/src/MediaPlayer.js\",\n        \"/src/main.js\",\n        \"/src/plugins/AutoPlay.js\",\n        \"/src/plugins/AutoPause.js\",\n        \"/src/assets/btr.mp4\" */\n    ])\n}\n\nasync function cacheResponse(request){\n    const cache = await caches.open(\"v1\");\n    //Para saber si hay un copia del request solicitado usamos match\n    const responde = await cache.match(request);\n    console.log(\"respuesta\", responde)\n    //Respondemos con lo obtenido y si no hay nada, respondemos con lo que venga de internet\n    return responde || await fetch(request);\n}"]}