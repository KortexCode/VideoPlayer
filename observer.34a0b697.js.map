{"version":3,"sources":["ejercicios/observer/index.ts"],"names":[],"mappings":"AAAA,IAAM,IAAI,GAAG,UAAC,EAAE,EAAA;EAAK,OAAA,QAAQ,CAAC,aAAa,CAAC,EAAE,CAAC;AAA1B,CAA0B;AAC/C,IAAM,KAAK,GAAe,IAAI,CAAC,QAAQ,CAAC;AACxC,IAAM,KAAK,GAAoB,IAAI,CAAC,OAAO,CAAC;AAW5C,IAAA,YAAA,GAAA,aAAA,YAAA;EAGI,SAAA,YAAA,CAAY,KAAsB,EAAA;IAAlC,IAAA,KAAA,GAAA,IAAA;IAFA,IAAA,CAAA,QAAQ,GAAe,EAAE,CAAC,CAAA;IAItB,KAAK,CAAC,gBAAgB,CAAC,OAAO,EAAE,YAAA;MAC5B,KAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC;IAC5B,CAAC,CAAC;EACN;EAEA,YAAA,CAAA,SAAA,CAAA,SAAS,GAAT,UAAU,QAAiB,EAAA;IACvB,OAAO,CAAC,GAAG,CAAC,UAAU,EAAE,QAAQ,CAAC;IAEjC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC;IAC5B,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC;EAC9B,CAAC;EACD,YAAA,CAAA,SAAA,CAAA,WAAW,GAAX,UAAY,QAAiB,EAAA;IACzB,IAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,UAAA,GAAG,EAAA;MACrC,OAAO,GAAG,KAAK,QAAQ;IAC3B,CAAC,CAAC;IAEF,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC;EAClC,CAAC;EAED,YAAA,CAAA,SAAA,CAAA,MAAM,GAAN,UAAO,IAAQ,EAAA;IACX,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAA,QAAQ,EAAA;MAAI,OAAA,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC;IAArB,CAAqB,CAAC;EAC5D,CAAC;EACL,OAAA,YAAC;AAAD,CA3BA,EAAA;AA6BA,IAAA,YAAA,GAAA,aAAA,YAAA;EAEI,SAAA,YAAA,CAAY,IAAI,EAAA;IACb,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,CAAA;EACpB;;EACA,YAAA,CAAA,SAAA,CAAA,MAAM,GAAN,UAAO,IAAS,EAAA;IACZ,IAAI,CAAC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,CAAA;EAC/B,CAAC;;EACL,OAAA,YAAC;AAAD,CARA,EAAA;AAWA,IAAM,OAAO,GAAG,IAAI,YAAY,CAAC,KAAK,CAAC,CAAC,CAAA;AACxC;AACA,IAAM,KAAK,GAAG,IAAI,YAAY,CAAC,KAAK,CAAC,CAAC,CAAA;AACtC;AAEA,KAAK,CAAC,SAAS,CAAC,OAAO,CAAC;AACxB,KAAK,CAAC,WAAW,CAAC,OAAO,CAAC","file":"observer.34a0b697.js","sourceRoot":"..","sourcesContent":["const node = (id) => document.querySelector(id);\nconst price:HTMLElement = node(\"#price\");\nconst input:HTMLInputElement = node(\"input\");\n\n\ninterface Observer{\n    update: (data:any)=> void;\n}\ninterface Subject{\n    subscribe: (observer:Observer) => void;\n    unSubscribe: (observer:Observer) =>void;\n}\n\nclass BitcoinPrice implements Subject{\n    observer: Observer[] = [];//Aquí se guardan las instancias de PriceDisplay\n\n    constructor(input:HTMLInputElement){\n        \n        input.addEventListener(\"input\", ()=>{\n            this.notify(input.value);\n        });\n    }\n\n    subscribe(observer:Observer){\n        console.log(\"QUE TIPO\", observer);\n\n        this.observer.push(observer);\n        console.log(this.observer)\n    }\n    unSubscribe(observer:Observer){\n        const index = this.observer.findIndex(obs =>{\n            return obs === observer;\n        });\n\n        this.observer.splice(index, 1);\n    }\n\n    notify(data:any){\n        this.observer.forEach(observer => observer.update(data));\n    }\n}\n\nclass PriceDisplay implements Observer{\n    private elem:HTMLElement;\n    constructor(elem){\n       this.elem = elem;//1 Este parámetro contiene a la etiqueta em\n    }\n    update(data: any){\n        this.elem.innerText = data;//Se actualiza el valor de la etiqueta em\n    }\n}\n\n\nconst display = new PriceDisplay(price);//1 Se crea la instancia de display\n//Esta recibe como argumento el valor actual de la etiqueta <em> donde se muestra el texto \nconst value = new BitcoinPrice(input);//2 Se crea la instancia de BitcoinPrice\n//Esta recibe como argumento el valor actual del input\n\nvalue.subscribe(display);\nvalue.unSubscribe(display);\n"]}